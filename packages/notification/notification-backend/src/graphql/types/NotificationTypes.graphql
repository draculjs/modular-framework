type Notification{
    id: ID,
    user: ID,
    title: String
    content: String
    read: Boolean
    creationDate: String
    type: String
    icon: String
    readDate: String
}
type ResponseNotification{
    success: Int
}

type NotificationsPaginated{
    totalItems: Int
    page: Int
    items: [Notification]
}

type Query{
    fetchNotifications(limit: Int, isRead: Boolean ,type: String):[Notification]
    notificationsPaginateFilter(limit: Int, pageNumber: Int, isRead: Boolean, type: String): NotificationsPaginated
}

type Mutation{
    markAsReadOrNotRead(id: ID, isRead: Boolean):Notification
    markAllReadOrNotRead(isRead: Boolean):ResponseNotification
    createNotification(title: String, content: String, type: String, icon: String):Notification
    createNotificationTest(user: ID, title: String, content: String, type: String, icon: String):Notification
}

type Subscription{
    notification(user: ID!): Notification
}
